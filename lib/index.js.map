{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;wBAAoB,UAAU;;;;wBACR,WAAW;;kCACf,uBAAuB;;;;iCACT,sBAAsB;;qBAEvC,UAAS,EAAE,EAAgB;oCAAX,SAAS;AAAT,aAAS;;;AACtC,MAAI,aAAa,GAAG,CAAC,CAAC;AACtB,MAAI,MAAM,GAAG,EAAE,CAAC;AAChB,MAAI,YAAY,YAAA,CAAC;AACjB,MAAI,SAAS,GAAG,IAAI,CAAC;AACrB,MAAM,OAAO,GAAG,0BAAY,UAAA,OAAO,EAAI;AACrC,gBAAY,GAAG,SAAS,IAAI,CAAC,MAAM,EAAE;AACnC,YAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;AAC9B,UAAI,MAAM,CAAC,KAAK,CAAC,UAAA,KAAK;eAAI,KAAK,CAAC,SAAS;OAAA,CAAC,EAAE;AAC1C,qBAAa,EAAE,CAAC;OACjB;AACD,UAAI,aAAa,KAAK,SAAS,CAAC,MAAM,EAAE;AACtC,iBAAS,GAAG,KAAK,CAAC;AAClB,eAAO,CAAC,MAAM,CAAC,CAAA;OAChB;KACF,CAAA;GACF,CAAC,CAAA;AACF,SAAO,kDAAM,EAAE,SAAK,SAAS,EAAC,CAC3B,IAAI,CAAC,UAAA,MAAM;WAAI,MAAM,CAAC,aAAa,CAAC,UAAA,MAAM,EAAI;AAC7C,UAAI,SAAS,EAAE;AACb,oBAAY,CAAC,MAAM,CAAC,CAAA;AACpB,eAAO,0CAAkB,gBAAM,WAAW,CAAC,OAAO,CAAC,CAAC,CAAA;OACrD,MAAM;AACL,eAAO,gBAAM,QAAQ,CAAC,MAAM,CAAC,CAAA;OAC9B;KACF,CAAC;GAAA,CAAC,CAAA;CACN","file":"src/index.js","sourcesContent":["import Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\nimport merge from \"sigh/lib/plugin/merge\"\nimport {toFileSystemState} from \"sigh-core/lib/stream\"\n\nexport default function(op, ...pipelines) {\n  let bufferedCount = 0;\n  let buffer = [];\n  let pushToBuffer;\n  let buffering = true;\n  const promise = new Promise(resolve => {\n    pushToBuffer = function push(events) {\n      buffer = buffer.concat(events)\n      if (events.every(event => event.initPhase)) {\n        bufferedCount++;\n      }\n      if (bufferedCount === pipelines.length) {\n        buffering = false;\n        resolve(buffer)\n      }\n    }\n  })\n  return merge(op, ...pipelines)\n    .then(stream => stream.flatMapLatest(events => {\n      if (buffering) {\n        pushToBuffer(events)\n        return toFileSystemState(Bacon.fromPromise(promise))\n      } else {\n        return Bacon.constant(events)\n      }\n    }))\n}\n"]}